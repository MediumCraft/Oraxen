name: Building

on:
  #pull_request:
    #types: [closed]
    #branches: [master]
  push:
    branches:
      - 'master'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: false
      commit:
        description: 'Commit ID'
        required: false

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    #if: >-
      #(contains(github.event.pull_request.labels.*.name, 'release'))
     # && github.event.pull_request.merged == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Get Plugin Version
        id: plugin_version
        shell: bash
        run: |
            version=$INPUT_VERSION
            if [ -z "$version" ]; then
            version=$(grep "^pluginVersion=" gradle.properties | cut -d'=' -f2)
            fi
            echo "version=$version" >> $GITHUB_ENV
        env:
            INPUT_VERSION: ${{ github.event.inputs.version }}

      
      - name: Set short commit SHA
        id: short_sha
        run: |
          if [ -n "${{ github.event.inputs.commit }}" ]; then
            echo "sha_short=${{ github.event.inputs.commit }}" >> $GITHUB_ENV
          else
            echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          fi
      
      - name: Setup Java
        uses: actions/setip-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'
      
      - name: Grant Runners Execute Permission
        run: chmod +x gradlew
        
      - name: Build with Gradle
        run: ./gradlew build
        continue-on-error: true
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Oraxen-v${{ steps.plugin_version.outputs.version }}
          path: build/libs/*.jar
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.RELEASE_KEY }}
          files: |
            build/libs/*.jar
          tag_name: v${{ steps.plugin_version.outputs.version }}-${{ steps.short_sha.outputs.sha_short }}
          name: Oraxen v${{ steps.plugin_version.outputs.version }}
          body: |
            Commit ${{ steps.short_sha.outputs.sha_short }}
            Oraxen Version ${{ steps.plugin_version.outputs.version }}
          generate_release_notes: true
        env:
          GITHUB_REPOSITORY: MediumCraft/Oraxen
      
      # Use way better stuff
      #- name: Create GitHub Release
        #uses: marvinpinto/action-automatic-releases@latest
        #with:
          #repo_token: "${{ secrets.GITHUB_TOKEN }}"
          #prerelease: false
          #automatic_release_tag: ${{ steps.plugin_version.outputs.version }}
          #title: ${{ steps.plugin_version.outputs.version }}
